import { PrettierOptionType } from "@/interface/PrettierOptionType";

const options: PrettierOptionType[] = [
	{
		name: "Experimental Ternaries",
		since: "",
		key: "experimentalTernaries",
		description: "Use new ternary formatting (future default).",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "true — aligns with future Prettier default behavior",
		example: [
			{
				before: `const result = condition\n  ? "very long true value that exceeds line length"\n  : "short false";`,
				label: "New ternary formatting",
				optionValue: "true",
			},
			{
				before: `const result = condition\n  ? "very long true value that exceeds line length"\n  : "short false";`,
				label: "Legacy ternary formatting",
				optionValue: "false",
			},
		],
	},
	{
		name: "Experimental Operator Position",
		since: "",
		key: "experimentalOperatorPosition",
		description: "Control where line-break operators appear.",
		type: "buttons",
		options: ["start", "end"],
		validate: "string",
		recommend: `"end" — more common and readable style`,
		example: [
			{
				before: `const result = longVariableName\n  + anotherLongVariable\n  + yetAnotherVariable;`,
				label: "Operators at start",
				optionValue: "start",
			},
			{
				before: `const result = longVariableName +\n  anotherLongVariable +\n  yetAnotherVariable;`,
				label: "Operators at end",
				optionValue: "end",
			},
		],
	},
	{
		name: "Print Width",
		since: "",
		key: "printWidth",
		description: "Max line length before wrapping.",
		type: "input",
		validate: "integer",
		recommend: "80 — widely accepted line length limit for readability",
		example: [
			{
				before: `const veryLongVariableName = someFunction(argument1, argument2, argument3, argument4);`,
				label: `Print width: 80 characters`,
			},
			{
				before: `const veryLongVariableName = someFunction(argument1, argument2, argument3, argument4);`,
				label: `Print width: 100 characters`,
			},
			{
				before: `const veryLongVariableName = someFunction(argument1, argument2, argument3, argument4);`,
				label: `Print width: 120 characters`,
			},
		],
	},
	{
		name: "Tab Width",
		since: "",
		key: "tabWidth",
		description: "Spaces per indentation level.",
		type: "input",
		validate: "integer",
		recommend: "2 — compact and commonly used in modern JS",
		example: [
			{
				before: `function example() {\nreturn {\nkey: "value"\n};\n}`,
				label: `Tab width: 2 spaces`,
			},
			{
				before: `function example() {\nreturn {\nkey: "value"\n};\n}`,
				label: `Tab width: 4 spaces`,
			},
			{
				before: `function example() {\nreturn {\nkey: "value"\n};\n}`,
				label: `Tab width: 8 spaces`,
			},
		],
	},
	{
		name: "Tabs",
		since: "",
		key: "useTabs",
		description: "Use tabs instead of spaces.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "false — spaces are more consistent across environments",
		example: [
			{
				before: `function greet() {\n  return "Hello";\n}`,
				label: "Using tabs",
				optionValue: "true",
			},
			{
				before: `function greet() {\n\treturn "Hello";\n}`,
				label: "Using spaces",
				optionValue: "false",
			},
		],
	},
	{
		name: "Semicolons",
		since: "",
		key: "semi",
		description: "Add semicolons at line ends.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "true — prevents ASI bugs and aligns with default",
		example: [
			{
				before: `const greeting = "Hello World"\nconst numbers = [1, 2, 3]`,
				label: "With semicolons",
				optionValue: "true",
			},
			{
				before: `const greeting = "Hello World";\nconst numbers = [1, 2, 3];`,
				label: "Without semicolons",
				optionValue: "false",
			},
		],
	},
	{
		name: "Quotes",
		since: "",
		key: "singleQuote",
		description: "Prefer single over double quotes.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "true — fewer escape characters in JS",
		example: [
			{
				before: `const message = "Hello World";\nconst name = "John";`,
				label: "Single quotes",
				optionValue: "true",
			},
			{
				before: `const message = 'Hello World';\nconst name = 'John';`,
				label: "Double quotes",
				optionValue: "false",
			},
		],
	},
	{
		name: "Quote Props",
		since: "",
		key: "quoteProps",
		description: "When to quote object properties.",
		type: "buttons",
		options: ["as-needed", "consistent", "preserve"],
		validate: "string",
		recommend: `"as-needed" — keeps output clean and minimal`,
		example: [
			{
				before: `const obj = {\n  "simple": 1,\n  "kebab-case": 2,\n  "123": 3\n};`,
				label: "Quote only when needed",
				optionValue: "as-needed",
			},
			{
				before: `const obj = {\n  simple: 1,\n  "kebab-case": 2,\n  normal: 3\n};`,
				label: "Quote all or none",
				optionValue: "consistent",
			},
			{
				before: `const obj = {\n  "quoted": 1,\n  unquoted: 2\n};`,
				label: "Preserve original quotes",
				optionValue: "preserve",
			},
		],
	},
	{
		name: "JSX Quotes",
		since: "",
		key: "jsxSingleQuote",
		description: "Use single quotes in JSX.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "false — HTML convention uses double quotes",
		example: [
			{
				before: `<Component name="value" title="hello" />`,
				label: "JSX with single quotes",
				optionValue: "true",
			},
			{
				before: `<Component name='value' title='hello' />`,
				label: "JSX with double quotes",
				optionValue: "false",
			},
		],
	},
	{
		name: "Trailing Commas",
		since: "",
		key: "trailingComma",
		description: "Add trailing commas in multiline.",
		type: "buttons",
		options: ["none", "es5", "all"],
		validate: "string",
		recommend: `"es5" — adds commas where valid in ES5 (more maintainable)`,
		example: [
			{
				before: `const arr = [\n  1,\n  2,\n  3,\n];\nconst obj = {\n  a: 1,\n  b: 2,\n};`,
				label: "No trailing commas",
				optionValue: "none",
			},
			{
				before: `const arr = [\n  1,\n  2,\n  3\n];\nconst obj = {\n  a: 1,\n  b: 2\n};`,
				label: "ES5 trailing commas",
				optionValue: "es5",
			},
			{
				before: `function example(\n  param1,\n  param2\n) {\n  return { param1, param2 };\n}`,
				label: "All trailing commas",
				optionValue: "all",
			},
		],
	},
	{
		name: "Bracket Spacing",
		since: "",
		key: "bracketSpacing",
		description: "Add spaces inside object braces.",
		type: "buttons",
		options: [true, false],
		examples: ["{ foo: bar }", "{foo: bar}"],
		validate: "boolean",
		recommend: "true — improves readability",
		example: [
			{
				before: `const obj = {foo: 'bar', baz: 42};`,
				label: "With spaces",
				optionValue: "true",
			},
			{
				before: `const obj = { foo: 'bar', baz: 42 };`,
				label: "Without spaces",
				optionValue: "false",
			},
		],
	},
	{
		name: "Object Wrap",
		since: "3.5.0",
		key: "objectWrap",
		description: "How to wrap object literals.",
		type: "buttons",
		options: ["preserve", "collapse"],
		validate: "string",
		recommend: `"preserve" — respects original formatting`,
		example: [
			{
				before: `const obj = {\n  key1: "value1",\n  key2: "value2"\n};`,
				label: "Preserve formatting",
				optionValue: "preserve",
			},
			{
				before: `const obj = {\n  key1: "value1",\n  key2: "value2"\n};`,
				label: "Collapse formatting",
				optionValue: "collapse",
			},
		],
	},
	{
		name: "Bracket Line",
		since: "",
		key: "bracketSameLine",
		description: "Place closing bracket on same line.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "false — improves readability and consistency",
		example: [
			{
				before: `<Component\n  prop1="value1"\n  prop2="value2"\n>`,
				label: "Bracket on same line",
				optionValue: "true",
			},
			{
				before: `<Component\n  prop1="value1"\n  prop2="value2">`,
				label: "Bracket on new line",
				optionValue: "false",
			},
		],
	},
	{
		name: "Arrow Function Parentheses",
		since: "1.9.0",
		key: "arrowParens",
		description: "Use parentheses around arrow params.",
		type: "buttons",
		options: ["avoid", "always"],
		examples: ["x => x", "(x) => x"],
		validate: "string",
		recommend: `"always" — reduces ambiguity in complex cases`,
		example: [
			{
				before: `const fn = (x) => x * 2;\nconst fn2 = (a, b) => a + b;`,
				label: "Avoid unnecessary parens",
				optionValue: "avoid",
			},
			{
				before: `const fn = x => x * 2;\nconst fn2 = a => a.toUpperCase();`,
				label: "Always use parens",
				optionValue: "always",
			},
		],
	},
	{
		name: "Range Start",
		since: "",
		key: "rangeStart",
		description: "Start formatting from character index.",
		type: "input",
		validate: "integer",
		recommend: "0 — usually start from beginning",
		example: [
			{
				before: `const first = "line";\nconst second = "line";\nconst third = "line";`,
				label: `Range start: 0`,
			},
			{
				before: `const first = "line";\nconst second = "line";\nconst third = "line";`,
				label: `Range start: 10`,
			},
			{
				before: `const first = "line";\nconst second = "line";\nconst third = "line";`,
				label: `Range start: 20`,
			},
		],
	},
	{
		name: "Range End",
		since: "",
		key: "rangeEnd",
		description: "End formatting at character index.",
		type: "input",
		validate: "integer",
		recommend: "Infinity — typically format the whole file",
		example: [
			{
				before: `const first = "line";\nconst second = "line";\nconst third = "line";`,
				label: `Range end: 50`,
			},
			{
				before: `const first = "line";\nconst second = "line";\nconst third = "line";`,
				label: `Range end: 100`,
			},
			{
				before: `const first = "line";\nconst second = "line";\nconst third = "line";`,
				label: `Range end: Infinity`,
			},
		],
	},
	{
		name: "Parser",
		since: "",
		key: "parser",
		description: "Force specific parser to use.",
		type: "select",
		options: [
			"babel",
			"babel-flow",
			"babel-ts",
			"flow",
			"typescript",
			"espree",
			"meriyah",
			"acorn",
			"css",
			"scss",
			"less",
			"json",
			"json5",
			"jsonc",
			"json-stringify",
			"graphql",
			"markdown",
			"mdx",
			"html",
			"vue",
			"angular",
			"lwc",
			"yaml",
		],
		validate: "string",
		recommend: `"typescript" or "babel" — depending on your project type`,
	},
	{
		name: "File Path",
		since: "",
		key: "filePath",
		description: "Used to infer the parser.",
		type: "input",
		validate: "string",
		recommend: "Provide relevant file path like 'src/index.tsx'",
	},
	{
		name: "Require Pragma",
		since: "1.7.0",
		key: "requirePragma",
		description: "Only format files with @format comment.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "false — not needed unless working in large monorepos",
	},
	{
		name: "Insert Pragma",
		since: "1.8.0",
		key: "insertPragma",
		description: "Add @format comment to output.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "false — useful if using 'requirePragma', else unnecessary",
	},
	{
		name: "Prose Wrap",
		since: "1.8.2",
		key: "proseWrap",
		description: "Wrap markdown text.",
		type: "buttons",
		options: ["always", "never", "preserve"],
		validate: "string",
		recommend: `"preserve" — maintains author’s formatting intent`,
	},
	{
		name: "HTML Whitespace Sensitivity",
		since: "1.15.0",
		key: "htmlWhitespaceSensitivity",
		description: "Control whitespace in HTML.",
		type: "buttons",
		options: ["css", "strict", "ignore"],
		validate: "string",
		recommend: `"css" — respects browser rendering behavior`,
	},
	{
		name: "Vue Indent Script and Style",
		since: "1.19.0",
		key: "vueIndentScriptAndStyle",
		description: "Indent `<script>` and `<style>` in Vue.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "true — improves structure and readability",
	},
	{
		name: "End of Line",
		since: "1.15.0",
		key: "endOfLine",
		description: "Set line ending character.",
		type: "buttons",
		options: ["lf", "crlf", "cr", "auto"],
		validate: "string",
		recommend: `"lf" — most consistent across environments`,
	},
	{
		name: "Embedded Language Formatting",
		since: "2.1.0",
		key: "embeddedLanguageFormatting",
		description: "Format code in template literals.",
		type: "buttons",
		options: ["auto", "off"],
		validate: "string",
		recommend: `"auto" — allows Prettier to decide what's safe`,
	},
	{
		name: "Single Attribute Per Line",
		since: "2.6.0",
		key: "singleAttributePerLine",
		description: "Force single-line attributes in JSX/HTML.",
		type: "buttons",
		options: [true, false],
		validate: "boolean",
		recommend: "false — multiple attributes per line is more compact",
		example: [
			{
				before: `<button className="btn" type="submit" onClick={handleClick}>Submit</button>`,
				label: "Single attribute per line",
				optionValue: "true",
			},
			{
				before: `<button\n  className="btn"\n  type="submit"\n  onClick={handleClick}\n>\n  Submit\n</button>`,
				label: "Multiple attributes per line",
				optionValue: "false",
			},
		],
	},
	{
		name: "Official Plugins",
		since: "",
		key: "plugins",
		description: "Use official Prettier plugins.",
		type: "multiselect",
		options: [
			"@prettier/plugin-php",
			"@prettier/plugin-pug",
			"@prettier/plugin-ruby",
			"@prettier/plugin-xml",
			"prettier-plugin-tailwindcss",
		],
		validate: "string[]",
		recommend: "Select only those required for your codebase",
	},
];

export default options;
